---
layout: post
title: Hello World!
---

h1. {{ page.title }}

<span class="drop">J</span>ekyll is simply badass. Its nice to see a publishing platform developers. I made this attempt a while back with a blog system called pmpknpi. It was built on merb 0.5. It was simple and fast as hell.  The problem with pmpknpi was that I stuck with the old paradigm of server, database and form fields.

Jekyll takes a different approach. Mainly, the content is stored in git. This means there is no database to manage. And because of github pages, this replaces the server and the deployment process. w00t!

p(flickr). !http://farm4.static.flickr.com/3327/3285848728_779a7cdd9a.jpg!

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

{% highlight ruby %}
module StateMachine
  
  def self.included(klass)
    klass.extend ClassMethods
  end
  
  def self.wrap_method(klass, name)
    original_method = "original_#{name}" 
    before_method   = "before_#{name}"
    after_method    = "after_#{name}"
    error_method    = "error_#{name}"
    body = %{
      alias_method :#{original_method}, :#{name}
      def #{name}
        begin
          before_each if respond_to?(:before_each)
          #{before_method} if respond_to?(:#{before_method})
          change_state(\"#{name}\")
          result = #{original_method}
          log_state(\"#{name}\")
          result
        rescue
          log_error
          #{error_method} if respond_to?(:#{error_method})
          error_each if respond_to?(:error_each)
        ensure
          #{after_method} if respond_to?(:#{after_method})
          after_each if respond_to?(:after_each)
        end
      end
    }
    klass.class_eval body
  end
  
  module ClassMethods
    attr_accessor :states
  
    def state(name, args={}, &block)
      (@states ||= []) << name
      define_method(name, block)
      StateMachine.wrap_method(self, name)
    end
    
    def before(name, &block)
      if name == :each
        define_method("before_each", block)
      else
        define_method("before_#{name}", block)
      end
    end
    
    def after(name, &block)
      if name == :each
        define_method("after_each", block)
      else
        define_method("after_#{name}", block)
      end
    end
    
    def error(name, &block)
      if name == :each
        define_method("error_each", block)
      else
        define_method("error_#{name}", block)
      end
    end
  
  end # ClassMethods
  
  
  def log_state(stg)
    self.log = (self.log.split(",") << stg).join(",") unless log.include?(stg)
    puts ".logging #{stg} => #{self.log.inspect}"
    self.save
  end
  
  def log_error
    self.error_log = (self.error_log.split(",") << self.stage).join(",") unless error_log.include?(self.stage)
    puts ".logging error #{self.stage} => #{self.error_log.inspect}"
    self.save
  end
  
  def change_state(stg)
    self.stage = stg
    self.save
  end
  
  def process!
    (self.class.states.map{|s| s.to_s} - self.log.split(",")).each do |s|
      break if self.error_log.include?(self.stage)
      send s
    end
  end
  
  def forward!
    s = self.class.states.map{|s| s.to_s}
    unless self.log.split(",").include?(self.stage)
      # if state is not logged try running it again
      send self.stage
    else
      # run next state (return false if there are no more states)
      unless self.stage == s.last
        i = s.index(self.stage.to_sym)
        send self.class.states[i + 1]
      else
        return false
      end
    end
  end
  
end
{% endhighlight %}

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
